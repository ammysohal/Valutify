/**
 * @fileOverview
 * This ruleset enforces a role-based access control model with a focus on administrative privileges.
 * It secures Minecraft account data and LinkPays transactions.
 *
 * Data Structure:
 * - /minecraft_accounts/{accountId}: Stores Minecraft account details.
 * - /minecraft_accounts/{accountId}/linkpays_transactions/{transactionId}: Stores LinkPays transaction details associated with a specific Minecraft account.
 *
 * Key Security Decisions:
 * - Only authenticated admins can create, update, or delete Minecraft accounts or LinkPays transactions.
 * - Anyone can read Minecraft accounts (mitigation considerations are noted in the reasoning).
 * - User listing is allowed only for admins on their own user subcollections.
 * - Authorization is based on path-based ownership and authenticated admins, leveraging Firebase Authentication.
 *
 * Denormalization for Authorization:
 * - The accountId field in LinkPaysTransaction documents is used to ensure that transactions belong to the correct account, avoiding the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to Minecraft account documents. Admins can create, update, or delete accounts. Anyone can read (to enable the claim page).
     * @path /minecraft_accounts/{accountId}
     * @allow get: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny list: if false;
     * @principle Allows public read access while restricting write access to authenticated admins.
     */
    match /minecraft_accounts/{accountId} {
      allow get: if true;
      allow list: if true; // Consider additional read rule mitigation on list.

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages LinkPays transaction details associated with a specific Minecraft account. Only accessible by authenticated admins.
     * @path /minecraft_accounts/{accountId}/linkpays_transactions/{transactionId}
     * @allow get: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny list: if false;
     * @principle Restricts access to LinkPays transactions to authenticated admins.
     */
    match /minecraft_accounts/{accountId}/linkpays_transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to determine if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}